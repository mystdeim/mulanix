1) Т.к. доксиген не понимает self и parent заменяет их на имена классов.
2) По тэгу @var прописывает типы у свойств и констант классов.
<?
/**
 *  foo
 *  @var array
 */    
public $foo;
//----------------------------------------------------------->
/**
 *  foo
 */    
public array $foo;
?>
3) По описанию функции прописывает возвращаемый тип (тэг @return)
 и типы параметров (@param). Если не задан return, то прописывает void.
<?
/**
 * Foo.
 * @param string[] $bar1 Desciption...
 * @param array $bar2 Desciption...
 * @return array Desciption...
 */
public function foo($bar1, $bar2)
//----------------------------------------------------------->
/**
 * Foo.
 * @param $bar1 Desciption...
 * @param $bar2 Desciption...
 * @return Desciption...
 */
public function array foo(string[] $bar1, array $bar2)
?>
4) Заменяет ZendStudio-описание типа объекта
 на строку кода: "Type Object;" - типа определение переменной в Си.
 В результате чего доксиген начинает прослеживать обращение к методам объектов.
<?
/* @var $oMyVar My_Class */
//----------------------------------------------------------->
My_Class $MyVar;
?>
5) Убивает у всех переменных бакс. Если DoxyphpConfig::$baks true.
 Доксиген начинает понимать ссылки на св-ва класса (а с баксом обламывается).
 Плюс документация получается красивше, т.к. $ в заточенном под Си доксигене выделяется отдельно от переменной.
6) Заменяет определение глобальных констант в стиле PHP (define)
 на стиль Си: "const CONST = VALUE;" Т.к. define доксиген не понимает и соответственно
 не видит объявленные константы.
7) Проставляет у всех переменных при присваивании значения префикс ("LN::").
 Чтоб доксиген не воспринимал их как глобальные и не делал перекрестные ссылки.
8) Заменяет тэг package на addtogroup. Чтоб при обработке кода заточенного
 под PhpDocumentor доксиген не делал namespace из пакета.
9) Заменяет "abstract class" на "class", т.к. доксиген абстрактные классы
 обзывает протоколом и не прослеживает наследование для них.